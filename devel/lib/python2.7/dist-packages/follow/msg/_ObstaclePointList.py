# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from follow/ObstaclePointList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import follow.msg

class ObstaclePointList(genpy.Message):
  _md5sum = "87fcf6663b8f89f10382199b0742a8f1"
  _type = "follow/ObstaclePointList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 timestamp
ObstaclePoint[] ObstaclePointList
================================================================================
MSG: follow/ObstaclePoint
float64 timestamp
int32 x0
int32 y0
int32 x1
int32 y1
float64 x
float64 y
float64 z
float64 angleX
float64 angleY
float64 distance
float64 conf
int32 track_id
string label"""
  __slots__ = ['timestamp','ObstaclePointList']
  _slot_types = ['float64','follow/ObstaclePoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,ObstaclePointList

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstaclePointList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.ObstaclePointList is None:
        self.ObstaclePointList = []
    else:
      self.timestamp = 0.
      self.ObstaclePointList = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_d().pack(_x))
      length = len(self.ObstaclePointList)
      buff.write(_struct_I.pack(length))
      for val1 in self.ObstaclePointList:
        _x = val1
        buff.write(_get_struct_d4i7di().pack(_x.timestamp, _x.x0, _x.y0, _x.x1, _x.y1, _x.x, _x.y, _x.z, _x.angleX, _x.angleY, _x.distance, _x.conf, _x.track_id))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ObstaclePointList is None:
        self.ObstaclePointList = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ObstaclePointList = []
      for i in range(0, length):
        val1 = follow.msg.ObstaclePoint()
        _x = val1
        start = end
        end += 84
        (_x.timestamp, _x.x0, _x.y0, _x.x1, _x.y1, _x.x, _x.y, _x.z, _x.angleX, _x.angleY, _x.distance, _x.conf, _x.track_id,) = _get_struct_d4i7di().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        self.ObstaclePointList.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_d().pack(_x))
      length = len(self.ObstaclePointList)
      buff.write(_struct_I.pack(length))
      for val1 in self.ObstaclePointList:
        _x = val1
        buff.write(_get_struct_d4i7di().pack(_x.timestamp, _x.x0, _x.y0, _x.x1, _x.y1, _x.x, _x.y, _x.z, _x.angleX, _x.angleY, _x.distance, _x.conf, _x.track_id))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ObstaclePointList is None:
        self.ObstaclePointList = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ObstaclePointList = []
      for i in range(0, length):
        val1 = follow.msg.ObstaclePoint()
        _x = val1
        start = end
        end += 84
        (_x.timestamp, _x.x0, _x.y0, _x.x1, _x.y1, _x.x, _x.y, _x.z, _x.angleX, _x.angleY, _x.distance, _x.conf, _x.track_id,) = _get_struct_d4i7di().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        self.ObstaclePointList.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d4i7di = None
def _get_struct_d4i7di():
    global _struct_d4i7di
    if _struct_d4i7di is None:
        _struct_d4i7di = struct.Struct("<d4i7di")
    return _struct_d4i7di
