// Generated by gencpp from file follow/ObstaclePoint.msg
// DO NOT EDIT!


#ifndef FOLLOW_MESSAGE_OBSTACLEPOINT_H
#define FOLLOW_MESSAGE_OBSTACLEPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace follow
{
template <class ContainerAllocator>
struct ObstaclePoint_
{
  typedef ObstaclePoint_<ContainerAllocator> Type;

  ObstaclePoint_()
    : timestamp(0.0)
    , x0(0)
    , y0(0)
    , x1(0)
    , y1(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , angleX(0.0)
    , angleY(0.0)
    , distance(0.0)
    , conf(0.0)
    , track_id(0)
    , label()  {
    }
  ObstaclePoint_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , x0(0)
    , y0(0)
    , x1(0)
    , y1(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , angleX(0.0)
    , angleY(0.0)
    , distance(0.0)
    , conf(0.0)
    , track_id(0)
    , label(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _x0_type;
  _x0_type x0;

   typedef int32_t _y0_type;
  _y0_type y0;

   typedef int32_t _x1_type;
  _x1_type x1;

   typedef int32_t _y1_type;
  _y1_type y1;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _angleX_type;
  _angleX_type angleX;

   typedef double _angleY_type;
  _angleY_type angleY;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _conf_type;
  _conf_type conf;

   typedef int32_t _track_id_type;
  _track_id_type track_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;





  typedef boost::shared_ptr< ::follow::ObstaclePoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::follow::ObstaclePoint_<ContainerAllocator> const> ConstPtr;

}; // struct ObstaclePoint_

typedef ::follow::ObstaclePoint_<std::allocator<void> > ObstaclePoint;

typedef boost::shared_ptr< ::follow::ObstaclePoint > ObstaclePointPtr;
typedef boost::shared_ptr< ::follow::ObstaclePoint const> ObstaclePointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::follow::ObstaclePoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::follow::ObstaclePoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::follow::ObstaclePoint_<ContainerAllocator1> & lhs, const ::follow::ObstaclePoint_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.x0 == rhs.x0 &&
    lhs.y0 == rhs.y0 &&
    lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.angleX == rhs.angleX &&
    lhs.angleY == rhs.angleY &&
    lhs.distance == rhs.distance &&
    lhs.conf == rhs.conf &&
    lhs.track_id == rhs.track_id &&
    lhs.label == rhs.label;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::follow::ObstaclePoint_<ContainerAllocator1> & lhs, const ::follow::ObstaclePoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace follow

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::follow::ObstaclePoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::follow::ObstaclePoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::follow::ObstaclePoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::follow::ObstaclePoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::follow::ObstaclePoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::follow::ObstaclePoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::follow::ObstaclePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "035901bda74cc190cb732ad4fef0a1b0";
  }

  static const char* value(const ::follow::ObstaclePoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x035901bda74cc190ULL;
  static const uint64_t static_value2 = 0xcb732ad4fef0a1b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::follow::ObstaclePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "follow/ObstaclePoint";
  }

  static const char* value(const ::follow::ObstaclePoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::follow::ObstaclePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp\n"
"int32 x0\n"
"int32 y0\n"
"int32 x1\n"
"int32 y1\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 angleX\n"
"float64 angleY\n"
"float64 distance\n"
"float64 conf\n"
"int32 track_id\n"
"string label\n"
;
  }

  static const char* value(const ::follow::ObstaclePoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::follow::ObstaclePoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.x0);
      stream.next(m.y0);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.angleX);
      stream.next(m.angleY);
      stream.next(m.distance);
      stream.next(m.conf);
      stream.next(m.track_id);
      stream.next(m.label);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstaclePoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::follow::ObstaclePoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::follow::ObstaclePoint_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "x0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x0);
    s << indent << "y0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y0);
    s << indent << "x1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y1);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "angleX: ";
    Printer<double>::stream(s, indent + "  ", v.angleX);
    s << indent << "angleY: ";
    Printer<double>::stream(s, indent + "  ", v.angleY);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "conf: ";
    Printer<double>::stream(s, indent + "  ", v.conf);
    s << indent << "track_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.track_id);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOLLOW_MESSAGE_OBSTACLEPOINT_H
