// Generated by gencpp from file follow/ObstaclePointList.msg
// DO NOT EDIT!


#ifndef FOLLOW_MESSAGE_OBSTACLEPOINTLIST_H
#define FOLLOW_MESSAGE_OBSTACLEPOINTLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <follow/ObstaclePoint.h>

namespace follow
{
template <class ContainerAllocator>
struct ObstaclePointList_
{
  typedef ObstaclePointList_<ContainerAllocator> Type;

  ObstaclePointList_()
    : timestamp(0.0)
    , ObstaclePointList()  {
    }
  ObstaclePointList_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , ObstaclePointList(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef std::vector< ::follow::ObstaclePoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::follow::ObstaclePoint_<ContainerAllocator> >> _ObstaclePointList_type;
  _ObstaclePointList_type ObstaclePointList;





  typedef boost::shared_ptr< ::follow::ObstaclePointList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::follow::ObstaclePointList_<ContainerAllocator> const> ConstPtr;

}; // struct ObstaclePointList_

typedef ::follow::ObstaclePointList_<std::allocator<void> > ObstaclePointList;

typedef boost::shared_ptr< ::follow::ObstaclePointList > ObstaclePointListPtr;
typedef boost::shared_ptr< ::follow::ObstaclePointList const> ObstaclePointListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::follow::ObstaclePointList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::follow::ObstaclePointList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::follow::ObstaclePointList_<ContainerAllocator1> & lhs, const ::follow::ObstaclePointList_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.ObstaclePointList == rhs.ObstaclePointList;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::follow::ObstaclePointList_<ContainerAllocator1> & lhs, const ::follow::ObstaclePointList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace follow

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::follow::ObstaclePointList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::follow::ObstaclePointList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::follow::ObstaclePointList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::follow::ObstaclePointList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::follow::ObstaclePointList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::follow::ObstaclePointList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::follow::ObstaclePointList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87fcf6663b8f89f10382199b0742a8f1";
  }

  static const char* value(const ::follow::ObstaclePointList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87fcf6663b8f89f1ULL;
  static const uint64_t static_value2 = 0x0382199b0742a8f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::follow::ObstaclePointList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "follow/ObstaclePointList";
  }

  static const char* value(const ::follow::ObstaclePointList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::follow::ObstaclePointList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp\n"
"ObstaclePoint[] ObstaclePointList\n"
"================================================================================\n"
"MSG: follow/ObstaclePoint\n"
"float64 timestamp\n"
"int32 x0\n"
"int32 y0\n"
"int32 x1\n"
"int32 y1\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 angleX\n"
"float64 angleY\n"
"float64 distance\n"
"float64 conf\n"
"int32 track_id\n"
"string label\n"
;
  }

  static const char* value(const ::follow::ObstaclePointList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::follow::ObstaclePointList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.ObstaclePointList);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstaclePointList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::follow::ObstaclePointList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::follow::ObstaclePointList_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "ObstaclePointList[]" << std::endl;
    for (size_t i = 0; i < v.ObstaclePointList.size(); ++i)
    {
      s << indent << "  ObstaclePointList[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::follow::ObstaclePoint_<ContainerAllocator> >::stream(s, indent + "    ", v.ObstaclePointList[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOLLOW_MESSAGE_OBSTACLEPOINTLIST_H
